// Primitives

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }


// Comment

COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }


// Types

ty = { "boolean" | "int" | "float" | "string" }


// Operators

unary_operator = { "-" | "!" }
binary_operator = {
    "+"  | "-" | "*" | "/"
  | "<"  | ">" | "<=" | ">="
  | "&&" | "||"
  | "==" | "!="
}


// Literals

boolean = { "true" | "false" }
int = { ASCII_DIGIT+ }
float = @{ int ~ "." ~ ASCII_DIGIT+ }

quote = _{ "\"" }
string = ${ quote ~ inner ~ quote }
inner = @{ (!quote ~ ANY)* }

literal = { string | float | int | boolean }


// Declarations / Assignments

declaration_type = ${ ty ~ ("[" ~ int ~ "]")? }
declaration = { declaration_type ~ identifier }

assignment = { identifier ~ ("[" ~ expression ~ "]")? ~ "=" ~ expression }


// Expressions

term = _{
    literal
  | identifier ~ ("[" ~ expression ~ "]")?
  | call_expr
  | unary_operator ~ term
  | "(" ~ expression ~ ")"
}

expression = { term ~ (binary_operator ~ term)* }


// Statements

statement = {
    if_stmt
  | while_stmt
  | ret_stmt
  | declaration ~ ";"
  | assignment ~ ";"
  | expression ~ ";"
  | compound_stmt
}

condition = _{ "(" ~ expression ~ ")" }
if_stmt = { "if" ~ condition ~ statement ~ ("else" ~ statement)? }
while_stmt = { "while" ~ condition ~ statement }
ret_stmt = { "return" ~ expression? ~ ";" }
compound_stmt = { "{" ~ statement? ~ "}" }


// Functions

function_def = { "void" | ty ~ identifier ~ "(" ~ parameters? ~ ")" ~ compound_stmt }
parameters = { declaration ~ ("," ~ declaration)* }

call_expr = { identifier ~ "(" ~ arguments? ~ ")" }
arguments = { expression ~ ("," ~ expression)* }


// Program

program = { function_def* }
