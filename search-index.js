var searchIndex = JSON.parse('{\
"mc_asm":{"doc":"","i":[[5,"cli","mc_asm","",null,[[],["result",4]]],[0,"asm","","",null,null],[3,"Asm","mc_asm::asm","`Asm` repreents a global struct for all components of the…",null,null],[12,"lines","","All assembly lines, that will be in the output of the…",0,null],[12,"labels","","All labels, that will be in the output of the assembly file.",0,null],[12,"strings","","All strings, that will be in the output of the assembly…",0,null],[12,"floats","","All floats, that will be in the output of the assembly file.",0,null],[12,"builtin_functions","","All built-in functions, that will be in the output of the…",0,null],[11,"add_float","","Returns a `Label` containing a `Dword`, the actual label…",0,[[],["storage",4]]],[11,"add_string","","Returns a `Label` containing a `Dword`, the actual label…",0,[[],["storage",4]]],[11,"load_float","","Loads a float.",0,[[["storage",4]]]],[0,"register","mc_asm","",null,null],[4,"Reg32","mc_asm::register","",null,null],[13,"EAX","","",1,null],[13,"ECX","","",1,null],[13,"EDX","","",1,null],[13,"EBX","","",1,null],[13,"ESP","","",1,null],[13,"EBP","","",1,null],[13,"ESI","","",1,null],[13,"EDI","","",1,null],[4,"Reg8","","",null,null],[13,"AL","","",2,null],[13,"CL","","",2,null],[13,"DL","","",2,null],[13,"BL","","",2,null],[13,"AH","","",2,null],[13,"CH","","",2,null],[13,"DH","","",2,null],[13,"BH","","",2,null],[11,"as_reg8","","",1,[[]]],[0,"stack","mc_asm","",null,null],[3,"Stack","mc_asm::stack","a funtion-local stack.",null,null],[12,"temporary_register","","",3,null],[12,"temporaries","","",3,null],[12,"lookup_table","","",3,null],[12,"parameters","","",3,null],[12,"parameters_size","","",3,null],[12,"stack_size_index","","",3,null],[12,"variables","","",3,null],[12,"variables_size","","",3,null],[12,"used_registers","","",3,null],[11,"lookup","","Returns the `StorageType`, the offset in the stack, if…",3,[[]]],[11,"push","","Pushes onto the stack and returns a `Pointer`.",3,[[["storagetype",4]],["pointer",3]]],[11,"with_indexed_temporary","","Gets a temporary register and tracks the temporary…",3,[[]]],[11,"with_temporary","","Gets a temporary register for use in a closure.",3,[[]]],[11,"push_temporary","","Frees the temporary and puts it back into `temporaries`.",3,[[["reg32",4]]]],[11,"push_storage_temporary","","Pushes the register onto `temporaries` in case it is a…",3,[[["storage",4]]]],[0,"storage","mc_asm","",null,null],[3,"Pointer","mc_asm::storage","",null,null],[12,"base","","",4,null],[12,"storage_type","","",4,null],[12,"offset","","",4,null],[12,"index_offset","","",4,null],[12,"parameter","","",4,null],[12,"array","","",4,null],[4,"StorageType","","",null,null],[13,"Qword","","",5,null],[13,"Dword","","",5,null],[13,"Byte","","",5,null],[4,"Storage","","",null,null],[13,"Pointer","","",6,null],[13,"Register","","",6,null],[13,"Fpu","","",6,null],[13,"Literal","","",6,null],[13,"Label","","",6,null],[4,"Offset","","",null,null],[13,"Register","","",7,null],[13,"Literal","","",7,null],[11,"size","","Returns the size of the pointer.",5,[[]]],[11,"map_register","","Maps the `Reg32` register to a string.",5,[[["reg32",4]],["string",3]]],[11,"storage_type","","Returns the `StorageType` from the `Storage`.",6,[[],["storagetype",4]]],[0,"to_asm","mc_asm","",null,null],[5,"extend_to_multiple","mc_asm::to_asm","",null,[[]]],[5,"calculate_alignment","","",null,[[]]],[5,"calc_index_offset","","",null,[[["stack",3],["asm",3],["reg32",4],["arg",4]],["storage",4]]],[5,"map_function_name","","",null,[[],["string",3]]],[5,"add_builtin_function","","",null,[[["asm",3]]]],[8,"ToAsm","","",null,null],[10,"to_asm","","",8,[[],["asm",3]]],[8,"ToAsm","mc_asm","",null,null],[10,"to_asm","","",8,[[],["asm",3]]],[14,"l","","Returns a string formatted as a label.",null,null],[14,"i","","Returns a string formatted as an assembly instruction.",null,null],[11,"from","mc_asm::asm","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","mc_asm::register","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","mc_asm::stack","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","mc_asm::storage","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","Gets the `StorageType` from the `Ty`.",5,[[["ty",4]]]],[11,"clone","mc_asm::register","",1,[[],["reg32",4]]],[11,"clone","","",2,[[],["reg8",4]]],[11,"clone","mc_asm::storage","",5,[[],["storagetype",4]]],[11,"clone","","",4,[[],["pointer",3]]],[11,"clone","","",6,[[],["storage",4]]],[11,"clone","","",7,[[],["offset",4]]],[11,"default","mc_asm::stack","",3,[[],["stack",3]]],[11,"cmp","mc_asm::register","",1,[[["reg32",4]],["ordering",4]]],[11,"eq","","",1,[[["reg32",4]]]],[11,"eq","mc_asm::storage","",5,[[["storagetype",4]]]],[11,"partial_cmp","mc_asm::register","",1,[[["reg32",4]],[["option",4],["ordering",4]]]],[11,"fmt","mc_asm::asm","",0,[[["formatter",3]],["result",6]]],[11,"fmt","mc_asm::register","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","mc_asm::stack","",3,[[["formatter",3]],["result",6]]],[11,"fmt","mc_asm::storage","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","mc_asm::asm","",0,[[["formatter",3]],["result",6]]],[11,"fmt","mc_asm::register","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","mc_asm::storage","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]]],"p":[[3,"Asm"],[4,"Reg32"],[4,"Reg8"],[3,"Stack"],[3,"Pointer"],[4,"StorageType"],[4,"Storage"],[4,"Offset"],[8,"ToAsm"]]},\
"mc_ast_to_dot":{"doc":"","i":[[5,"write_graph","mc_ast_to_dot","",null,[[["string",3],["graph",3],["directed",4]],["result",6]]],[5,"cli","","",null,[[],["result",4]]],[0,"add_to_graph","","",null,null],[6,"AstGraph","mc_ast_to_dot::add_to_graph","",null,null],[8,"AddToGraph","","",null,null],[10,"add_to_graph","","",0,[[["graph",3]],["nodeindex",3]]]],"p":[[8,"AddToGraph"]]},\
"mc_cfg_to_dot":{"doc":"","i":[[5,"write_graph","mc_cfg_to_dot","",null,[[["string",3],["graph",3],["directed",4]],["result",6]]],[5,"cli","","",null,[[],["result",4]]],[0,"cfg","","",null,null],[5,"format_range","mc_cfg_to_dot::cfg","",null,[[["range",3]],["string",3]]],[5,"add_statements","","",null,[[["range",3],["vec",3],["graph",3]],["nodeindex",3]]],[6,"CfgGraph","","",null,null],[8,"AddToGraph","","",null,null],[10,"add_to_graph","","",0,[[["graph",3]]]]],"p":[[8,"AddToGraph"]]},\
"mc_common":{"doc":"","i":[[5,"input","mc_common","Try opening an input file for reading, otherwise print an…",null,[[["pathbuf",3]]]],[5,"output","","Try opening an output file for writing, otherwise print an…",null,[[["option",4],["pathbuf",3]]]],[5,"input_to_string","","Try reading an input to a string, otherwise print an error…",null,[[],[["string",3],["result",4]]]],[0,"error","","",null,null],[4,"SemanticError","mc_common::error","",null,null],[13,"Type","","",0,null],[12,"span","mc_common::error::SemanticError","",1,null],[12,"expected","","",1,null],[12,"actual","","",1,null],[13,"NotDeclared","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",2,null],[12,"identifier","","",2,null],[13,"AlreadyDeclared","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",3,null],[12,"identifier","","",3,null],[13,"ArrayError","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",4,null],[12,"identifier","","",4,null],[13,"IndexOutOfBounds","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",5,null],[12,"identifier","","",5,null],[12,"size","","",5,null],[12,"actual","","",5,null],[13,"WrongUseOfFunctionAsVariable","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",6,null],[12,"identifier","","",6,null],[13,"FunctionAssignment","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",7,null],[12,"identifier","","",7,null],[13,"NotAFunction","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",8,null],[12,"identifier","","",8,null],[13,"UnaryOperatorTypeError","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",9,null],[12,"op","","",9,null],[12,"ty","","",9,null],[13,"UnaryOperatorCombinationError","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",10,null],[12,"outer","","",10,null],[12,"inner","","",10,null],[13,"MissingReturnStatement","mc_common::error","Error when a non-void function is missing a return…",0,null],[12,"span","mc_common::error::SemanticError","",11,null],[12,"identifier","","",11,null],[13,"InvalidAmountOfArguments","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",12,null],[12,"identifier","","",12,null],[12,"expected","","",12,null],[12,"actual","","",12,null],[13,"InvalidArgumentType","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",13,null],[12,"identifier","","",13,null],[12,"expected","","",13,null],[12,"actual","","",13,null],[13,"InvalidDeclarationType","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",14,null],[12,"identifier","","",14,null],[12,"expected","","",14,null],[12,"actual","","",14,null],[13,"InvalidReturnType","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",15,null],[12,"expected","","",15,null],[12,"actual","","",15,null],[13,"OperatorCombinationError","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",16,null],[12,"unary_op","","",16,null],[12,"binary_op","","",16,null],[13,"BinaryOperatorTypeError","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",17,null],[12,"op","","",17,null],[12,"lhs_ty","","",17,null],[12,"rhs_ty","","",17,null],[13,"NoMainFunction","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",18,null],[13,"InvalidConditionType","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",19,null],[12,"actual","","",19,null],[13,"InvalidCondition","mc_common::error","",0,null],[12,"span","mc_common::error::SemanticError","",20,null],[4,"SuperWauError2000","mc_common::error","",null,null],[13,"Io","","",21,null],[13,"ParseError","","",21,null],[13,"SemanticError","","",21,null],[0,"semantic_error","","",null,null],[4,"SemanticError","mc_common::error::semantic_error","",null,null],[13,"Type","","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",1,null],[12,"expected","","",1,null],[12,"actual","","",1,null],[13,"NotDeclared","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",2,null],[12,"identifier","","",2,null],[13,"AlreadyDeclared","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",3,null],[12,"identifier","","",3,null],[13,"ArrayError","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",4,null],[12,"identifier","","",4,null],[13,"IndexOutOfBounds","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",5,null],[12,"identifier","","",5,null],[12,"size","","",5,null],[12,"actual","","",5,null],[13,"WrongUseOfFunctionAsVariable","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",6,null],[12,"identifier","","",6,null],[13,"FunctionAssignment","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",7,null],[12,"identifier","","",7,null],[13,"NotAFunction","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",8,null],[12,"identifier","","",8,null],[13,"UnaryOperatorTypeError","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",9,null],[12,"op","","",9,null],[12,"ty","","",9,null],[13,"UnaryOperatorCombinationError","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",10,null],[12,"outer","","",10,null],[12,"inner","","",10,null],[13,"MissingReturnStatement","mc_common::error::semantic_error","Error when a non-void function is missing a return…",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",11,null],[12,"identifier","","",11,null],[13,"InvalidAmountOfArguments","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",12,null],[12,"identifier","","",12,null],[12,"expected","","",12,null],[12,"actual","","",12,null],[13,"InvalidArgumentType","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",13,null],[12,"identifier","","",13,null],[12,"expected","","",13,null],[12,"actual","","",13,null],[13,"InvalidDeclarationType","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",14,null],[12,"identifier","","",14,null],[12,"expected","","",14,null],[12,"actual","","",14,null],[13,"InvalidReturnType","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",15,null],[12,"expected","","",15,null],[12,"actual","","",15,null],[13,"OperatorCombinationError","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",16,null],[12,"unary_op","","",16,null],[12,"binary_op","","",16,null],[13,"BinaryOperatorTypeError","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",17,null],[12,"op","","",17,null],[12,"lhs_ty","","",17,null],[12,"rhs_ty","","",17,null],[13,"NoMainFunction","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",18,null],[13,"InvalidConditionType","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",19,null],[12,"actual","","",19,null],[13,"InvalidCondition","mc_common::error::semantic_error","",0,null],[12,"span","mc_common::error::semantic_error::SemanticError","",20,null],[11,"from","mc_common::error","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",21,[[["error",3]]]],[11,"from","","",21,[[["string",3],["conversionerror",4]]]],[11,"from","","",21,[[["semanticerror",4],["vec",3]]]],[11,"eq","","",0,[[["semanticerror",4]]]],[11,"ne","","",0,[[["semanticerror",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]]],"p":[[4,"SemanticError"],[13,"Type"],[13,"NotDeclared"],[13,"AlreadyDeclared"],[13,"ArrayError"],[13,"IndexOutOfBounds"],[13,"WrongUseOfFunctionAsVariable"],[13,"FunctionAssignment"],[13,"NotAFunction"],[13,"UnaryOperatorTypeError"],[13,"UnaryOperatorCombinationError"],[13,"MissingReturnStatement"],[13,"InvalidAmountOfArguments"],[13,"InvalidArgumentType"],[13,"InvalidDeclarationType"],[13,"InvalidReturnType"],[13,"OperatorCombinationError"],[13,"BinaryOperatorTypeError"],[13,"NoMainFunction"],[13,"InvalidConditionType"],[13,"InvalidCondition"],[4,"SuperWauError2000"]]},\
"mc_ir":{"doc":"","i":[[3,"IntermediateRepresentation","mc_ir","",null,null],[12,"stack","","",0,null],[12,"statements","","",0,null],[12,"functions","","",0,null],[4,"Arg","","",null,null],[13,"Literal","","",1,null],[13,"Variable","","",1,null],[13,"FunctionCall","","",1,null],[13,"Reference","","",1,null],[4,"Op","","",null,null],[13,"Param","","",2,null],[13,"Decl","","",2,null],[13,"Gt","","",2,null],[13,"Gte","","",2,null],[13,"Lt","","",2,null],[13,"Lte","","",2,null],[13,"Plus","","",2,null],[13,"Minus","","",2,null],[13,"Divide","","",2,null],[13,"Times","","",2,null],[13,"Assign","","",2,null],[13,"UnaryMinus","","",2,null],[13,"Not","","",2,null],[13,"Eq","","",2,null],[13,"Neq","","",2,null],[13,"Land","","",2,null],[13,"Lor","","",2,null],[13,"Jumpfalse","","",2,null],[13,"Jump","","",2,null],[13,"Call","","",2,null],[13,"Return","","",2,null],[13,"Nope","","",2,null],[5,"cli","","",null,[[],["result",4]]],[0,"ir","","",null,null],[3,"HashStack","mc_ir::ir","",null,null],[12,"stack","","",3,null],[3,"IntermediateRepresentation","","",null,null],[12,"stack","","",0,null],[12,"statements","","",0,null],[12,"functions","","",0,null],[4,"Arg","","",null,null],[13,"Literal","","",1,null],[13,"Variable","","",1,null],[13,"FunctionCall","","",1,null],[13,"Reference","","",1,null],[4,"Op","","",null,null],[13,"Param","","",2,null],[13,"Decl","","",2,null],[13,"Gt","","",2,null],[13,"Gte","","",2,null],[13,"Lt","","",2,null],[13,"Lte","","",2,null],[13,"Plus","","",2,null],[13,"Minus","","",2,null],[13,"Divide","","",2,null],[13,"Times","","",2,null],[13,"Assign","","",2,null],[13,"UnaryMinus","","",2,null],[13,"Not","","",2,null],[13,"Eq","","",2,null],[13,"Neq","","",2,null],[13,"Land","","",2,null],[13,"Lor","","",2,null],[13,"Jumpfalse","","",2,null],[13,"Jump","","",2,null],[13,"Call","","",2,null],[13,"Return","","",2,null],[13,"Nope","","",2,null],[11,"push","","",3,[[["ty",4],["identifier",3]]]],[11,"lookup","","",3,[[["identifier",3]],["option",4]]],[11,"ptr","","",3,[[]]],[11,"reset","","",3,[[]]],[11,"ty","mc_ir","",1,[[],[["option",4],["ty",4]]]],[11,"push","","",0,[[["op",4]]]],[11,"last_ref","","",0,[[],["arg",4]]],[11,"update_reference","","",0,[[]]],[11,"add_function","","",0,[[["option",4],["identifier",3],["ty",4],["range",3]]]],[11,"ty","","",2,[[],[["option",4],["ty",4]]]],[0,"add_to_ir","","",null,null],[8,"AddToIr","mc_ir::add_to_ir","",null,null],[10,"add_to_ir","","",4,[[["intermediaterepresentation",3]],["arg",4]]],[0,"format_ir","mc_ir","",null,null],[8,"AddToIr","","",null,null],[10,"add_to_ir","","",4,[[["intermediaterepresentation",3]],["arg",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","mc_ir::ir","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"default","","",3,[[],["hashstack",3]]],[11,"default","mc_ir","",0,[[],["intermediaterepresentation",3]]],[11,"eq","","",1,[[]]],[11,"eq","","",2,[[["op",4]]]],[11,"ne","","",2,[[["op",4]]]],[11,"fmt","mc_ir::ir","",3,[[["formatter",3]],["result",6]]],[11,"fmt","mc_ir","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_from","","",0,[[["program",3]],["result",4]]]],"p":[[3,"IntermediateRepresentation"],[4,"Arg"],[4,"Op"],[3,"HashStack"],[8,"AddToIr"]]},\
"mc_parser":{"doc":"","i":[[3,"McParser","mc_parser","",null,null],[4,"Rule","","",null,null],[13,"EOI","","",0,null],[13,"WHITESPACE","","",0,null],[13,"identifier","","",0,null],[13,"COMMENT","","",0,null],[13,"ty","","",0,null],[13,"not","","",0,null],[13,"unary_minus","","",0,null],[13,"plus","","",0,null],[13,"minus","","",0,null],[13,"times","","",0,null],[13,"divide","","",0,null],[13,"lte","","",0,null],[13,"lt","","",0,null],[13,"gte","","",0,null],[13,"gt","","",0,null],[13,"land","","",0,null],[13,"lor","","",0,null],[13,"eq","","",0,null],[13,"neq","","",0,null],[13,"unary_operator","","",0,null],[13,"binary_operator","","",0,null],[13,"boolean","","",0,null],[13,"int","","",0,null],[13,"float","","",0,null],[13,"quote","","",0,null],[13,"string","","",0,null],[13,"inner","","",0,null],[13,"literal","","",0,null],[13,"declaration_type","","",0,null],[13,"declaration","","",0,null],[13,"assignment","","",0,null],[13,"unary_expression","","",0,null],[13,"par_expression","","",0,null],[13,"variable_expression","","",0,null],[13,"term","","",0,null],[13,"expression","","",0,null],[13,"statement","","",0,null],[13,"condition","","",0,null],[13,"if_stmt","","",0,null],[13,"while_stmt","","",0,null],[13,"ret_stmt","","",0,null],[13,"compound_stmt","","",0,null],[13,"function_def","","",0,null],[13,"parameters","","",0,null],[13,"call_expr","","",0,null],[13,"arguments","","",0,null],[13,"program","","",0,null],[5,"parse","","",null,[[],[["conversionerror",4],["result",4],["program",3]]]],[0,"ast","","",null,null],[3,"Identifier","mc_parser::ast","",null,null],[12,"string","","",1,null],[3,"Assignment","","",null,null],[12,"identifier","","",2,null],[12,"index_expression","","",2,null],[12,"rvalue","","",2,null],[12,"span","","",2,null],[3,"Declaration","","",null,null],[12,"ty","","",3,null],[12,"count","","",3,null],[12,"identifier","","",3,null],[12,"span","","",3,null],[3,"IfStatement","","",null,null],[12,"condition","","",4,null],[12,"block","","",4,null],[12,"else_block","","",4,null],[12,"span","","",4,null],[3,"WhileStatement","","",null,null],[12,"condition","","",5,null],[12,"block","","",5,null],[12,"span","","",5,null],[3,"ReturnStatement","","",null,null],[12,"expression","","",6,null],[12,"span","","",6,null],[3,"CompoundStatement","","",null,null],[12,"statements","","",7,null],[12,"span","","",7,null],[3,"FunctionDeclaration","","",null,null],[12,"ty","","",8,null],[12,"identifier","","",8,null],[12,"parameters","","",8,null],[12,"body","","",8,null],[12,"span","","",8,null],[3,"Program","","",null,null],[12,"function_declarations","","",9,null],[12,"span","","",9,null],[4,"Ty","","",null,null],[13,"Bool","","",10,null],[13,"Int","","",10,null],[13,"Float","","",10,null],[13,"String","","",10,null],[4,"Literal","","",null,null],[13,"Bool","","",11,null],[13,"Int","","",11,null],[13,"Float","","",11,null],[13,"String","","",11,null],[4,"UnaryOp","","",null,null],[13,"Minus","","",12,null],[13,"Not","","",12,null],[4,"BinaryOp","","",null,null],[13,"Plus","","",13,null],[13,"Minus","","",13,null],[13,"Times","","",13,null],[13,"Divide","","",13,null],[13,"Eq","","",13,null],[13,"Neq","","",13,null],[13,"Lte","","",13,null],[13,"Lt","","",13,null],[13,"Gte","","",13,null],[13,"Gt","","",13,null],[13,"Land","","",13,null],[13,"Lor","","",13,null],[4,"Expression","","",null,null],[13,"Literal","","",14,null],[12,"literal","mc_parser::ast::Expression","",15,null],[12,"span","","",15,null],[13,"Variable","mc_parser::ast","",14,null],[12,"identifier","mc_parser::ast::Expression","",16,null],[12,"index_expression","","",16,null],[12,"span","","",16,null],[13,"FunctionCall","mc_parser::ast","",14,null],[12,"identifier","mc_parser::ast::Expression","",17,null],[12,"arguments","","",17,null],[12,"span","","",17,null],[13,"Unary","mc_parser::ast","",14,null],[12,"op","mc_parser::ast::Expression","",18,null],[12,"expression","","",18,null],[12,"span","","",18,null],[13,"Binary","mc_parser::ast","",14,null],[12,"op","mc_parser::ast::Expression","",19,null],[12,"lhs","","",19,null],[12,"rhs","","",19,null],[12,"span","","",19,null],[4,"Statement","mc_parser::ast","",null,null],[13,"If","","",20,null],[13,"While","","",20,null],[13,"Ret","","",20,null],[13,"Decl","","",20,null],[13,"Assignment","","",20,null],[13,"Expression","","",20,null],[13,"Compound","","",20,null],[5,"climber","","",null,[[],[["precclimber",3],["rule",4]]]],[11,"ty","","",11,[[],["ty",4]]],[11,"span","","",14,[[],["span",3]]],[11,"consume","","",14,[[["rule",4],["precclimber",3],["pair",3]],[["conversionerror",4],["result",4]]]],[11,"as_str","","",1,[[]]],[17,"_PEST_GRAMMAR_McParser","mc_parser","",null,null],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","mc_parser::ast","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"as_ref","","",14,[[],["expression",4]]],[11,"as_ref","","",1,[[]]],[11,"from","","",1,[[["rule",4],["pair",3]]]],[11,"from","","",1,[[]]],[11,"clone","","",10,[[],["ty",4]]],[11,"clone","","",11,[[],["literal",4]]],[11,"clone","","",12,[[],["unaryop",4]]],[11,"clone","","",13,[[],["binaryop",4]]],[11,"clone","","",1,[[],["identifier",3]]],[11,"clone","mc_parser","",0,[[],["rule",4]]],[11,"cmp","","",0,[[["rule",4]],["ordering",4]]],[11,"eq","mc_parser::ast","",10,[[["ty",4]]]],[11,"eq","","",11,[[["literal",4]]]],[11,"ne","","",11,[[["literal",4]]]],[11,"eq","","",12,[[["unaryop",4]]]],[11,"eq","","",13,[[["binaryop",4]]]],[11,"eq","","",14,[[["expression",4]]]],[11,"ne","","",14,[[["expression",4]]]],[11,"eq","","",1,[[["identifier",3]]]],[11,"ne","","",1,[[["identifier",3]]]],[11,"eq","","",2,[[["assignment",3]]]],[11,"ne","","",2,[[["assignment",3]]]],[11,"eq","","",3,[[["declaration",3]]]],[11,"ne","","",3,[[["declaration",3]]]],[11,"eq","","",4,[[["ifstatement",3]]]],[11,"ne","","",4,[[["ifstatement",3]]]],[11,"eq","","",5,[[["whilestatement",3]]]],[11,"ne","","",5,[[["whilestatement",3]]]],[11,"eq","","",6,[[["returnstatement",3]]]],[11,"ne","","",6,[[["returnstatement",3]]]],[11,"eq","","",7,[[["compoundstatement",3]]]],[11,"ne","","",7,[[["compoundstatement",3]]]],[11,"eq","","",20,[[["statement",4]]]],[11,"ne","","",20,[[["statement",4]]]],[11,"eq","","",8,[[["functiondeclaration",3]]]],[11,"ne","","",8,[[["functiondeclaration",3]]]],[11,"eq","","",9,[[["program",3]]]],[11,"ne","","",9,[[["program",3]]]],[11,"eq","mc_parser","",0,[[["rule",4]]]],[11,"partial_cmp","","",0,[[["rule",4]],[["option",4],["ordering",4]]]],[11,"fmt","mc_parser::ast","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","mc_parser","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","mc_parser::ast","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","","",1,[[]]],[11,"hash","mc_parser","",0,[[]]],[11,"try_from","mc_parser::ast","",14,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"from_pest","","",10,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",11,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",12,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",13,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",14,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",1,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",2,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",3,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",4,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",5,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",6,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",7,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",20,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",8,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"from_pest","","",9,[[["pairs",3]],[["conversionerror",4],["result",4]]]],[11,"parse","mc_parser","",21,[[["rule",4]],[["pairs",3],["result",4],["error",3]]]]],"p":[[4,"Rule"],[3,"Identifier"],[3,"Assignment"],[3,"Declaration"],[3,"IfStatement"],[3,"WhileStatement"],[3,"ReturnStatement"],[3,"CompoundStatement"],[3,"FunctionDeclaration"],[3,"Program"],[4,"Ty"],[4,"Literal"],[4,"UnaryOp"],[4,"BinaryOp"],[4,"Expression"],[13,"Literal"],[13,"Variable"],[13,"FunctionCall"],[13,"Unary"],[13,"Binary"],[4,"Statement"],[3,"McParser"]]},\
"mc_symbol_table":{"doc":"","i":[[5,"cli","mc_symbol_table","",null,[[],["result",4]]],[5,"check_semantics","","Check semantics of a given `Program` and return the…",null,[[["program",3]],[["superwauerror2000",4],["result",4],["rc",3]]]],[5,"symbol_table","","Generate a symbol table for a given scope.",null,[[["scope",3]],["table",3]]],[0,"format_symbol_table","","",null,null],[0,"symbol_table","","",null,null],[3,"Scope","mc_symbol_table::symbol_table","",null,null],[12,"name","","",0,null],[12,"parent","","",0,null],[12,"symbols","","",0,null],[12,"return_type","","",0,null],[12,"children","","",0,null],[3,"SymbolTable","","",null,null],[12,"table","","",1,null],[4,"Symbol","","",null,null],[13,"Function","","",2,null],[13,"Variable","","",2,null],[11,"new","","",0,[[],[["refcell",3],["rc",3]]]],[11,"new_child","","",0,[[["rc",3]],[["refcell",3],["rc",3]]]],[11,"insert","","",0,[[["symbol",4],["identifier",3]]]],[11,"lookup","","",0,[[["rc",3],["identifier",3]],[["symbol",4],["option",4]]]],[11,"lookup_in_scope","","",0,[[["rc",3],["identifier",3]],[["symbol",4],["option",4]]]],[11,"return_type","","",0,[[["rc",3]],[["ty",4],["option",4]]]],[0,"add_to_scope","mc_symbol_table","",null,null],[8,"AddToScope","mc_symbol_table::add_to_scope","",null,null],[10,"add_to_scope","","",3,[[["rc",3]],[["vec",3],["result",4]]]],[0,"cli","mc_symbol_table","",null,null],[5,"cli","mc_symbol_table::cli","",null,[[],["result",4]]],[0,"semantic_checks","mc_symbol_table","",null,null],[5,"check_main_return_type","mc_symbol_table::semantic_checks","",null,[[["functiondeclaration",3]],[["vec",3],["result",4]]]],[5,"check_missing_return","","",null,[[["functiondeclaration",3]],[["vec",3],["result",4]]]],[5,"get_expression_type","","",null,[[["rc",3],["expression",4]],[["ty",4],["option",4]]]],[5,"check_variable","","",null,[[["rc",3],["span",3],["option",4],["identifier",3]],[["vec",3],["result",4]]]],[5,"index_bounds_check","","",null,[[["identifier",3],["span",3]],[["vec",3],["result",4]]]],[5,"check_variable_boxed_index","","",null,[[["option",4],["span",3],["option",4],["identifier",3]],[["vec",3],["result",4]]]],[5,"check_variable_index","","",null,[[["option",4],["span",3],["option",4],["identifier",3]],[["vec",3],["result",4]]]],[5,"check_condition","","",null,[[["rc",3],["expression",4],["span",3]],[["vec",3],["result",4]]]],[5,"check_function_identifier_available","","",null,[[["rc",3],["identifier",3],["span",3]],[["vec",3],["result",4]]]],[5,"check_function_call","","",null,[[["rc",3],["identifier",3],["span",3]],[["vec",3],["result",4]]]],[5,"check_function_call_arguments","","",null,[[["rc",3],["identifier",3],["span",3]],[["vec",3],["result",4]]]],[5,"check_function_call_argument_type","","",null,[[["rc",3],["expression",4],["identifier",3]],[["vec",3],["result",4]]]],[5,"check_unary_expression","","",null,[[["rc",3],["span",3],["unaryop",4],["expression",4]],[["vec",3],["result",4]]]],[5,"check_binary_expression","","",null,[[["rc",3],["binaryop",4],["span",3],["expression",4]],[["vec",3],["result",4]]]],[5,"check_unary_operator_compatability","","",null,[[["unaryop",4],["span",3],["ty",4]],[["vec",3],["result",4]]]],[5,"check_binary_operator_compatibility","","",null,[[["binaryop",4],["span",3],["option",4],["ty",4]],[["vec",3],["result",4]]]],[5,"check_unary_operator_combination","","",null,[[["unaryop",4],["span",3]],[["vec",3],["result",4]]]],[5,"check_operator_combination","","",null,[[["unaryop",4],["binaryop",4],["span",3]],[["vec",3],["result",4]]]],[8,"CheckSemantics","","",null,null],[10,"check_semantics","","",4,[[["rc",3]],[["vec",3],["result",4]]]],[8,"FindReturnStatement","","",null,null],[10,"find_return_statement","","",5,[[]]],[14,"push_error","mc_symbol_table","",null,null],[14,"extend_errors","","",null,null],[11,"from","mc_symbol_table::symbol_table","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"clone","","",2,[[],["symbol",4]]],[11,"default","","",0,[[],["scope",3]]],[11,"default","","",1,[[],["symboltable",3]]],[11,"eq","","",2,[[["symbol",4]]]],[11,"ne","","",2,[[["symbol",4]]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"to_pretty_table","","",0,[[["table",3]]]]],"p":[[3,"Scope"],[3,"SymbolTable"],[4,"Symbol"],[8,"AddToScope"],[8,"CheckSemantics"],[8,"FindReturnStatement"]]},\
"mcc":{"doc":"","i":[[5,"cli","mcc","",null,[[["string",3],["option",4]],["result",4]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);