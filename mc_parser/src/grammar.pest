// Primitives

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }


// Comment

COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }


// Types

ty = { "bool" | "int" | "float" | "string" }


// Operators

not = { "!" }
unary_minus = { "-" }
plus = { "+" }
minus = { "-" }
times = { "*" }
divide = { "/" }
lte = { "<=" }
lt = { "<" }
gte = { ">=" }
gt = { ">" }
land = { "&&" }
lor = { "||" }
eq = { "==" }
neq = { "!=" }
unary_operator = _{ unary_minus | not }
binary_operator = _{
    plus | minus | times | divide
  | lte | lt | gte | gt
  | land | lor
  | eq | neq
}


// Literals

boolean = @{ "true" | "false" }
int = @{ ASCII_DIGIT+ }
float = @{ int ~ "." ~ ASCII_DIGIT+ }

quote = _{ "\"" }
string = ${ quote ~ inner ~ quote }
inner = @{ (!quote ~ ANY)* }

literal = { string | float | int | boolean }


// Declarations / Assignments

declaration_type = ${ ty ~ ("[" ~ int ~ "]")? }
declaration = { declaration_type ~ identifier }

assignment = { identifier ~ ("[" ~ expression ~ "]")? ~ "=" ~ expression }


// Expressions

unary_expression = ${ unary_operator ~ term }
par_expression = { "(" ~ expression ~ ")" }
variable_expression = ${ identifier ~ ("[" ~ expression ~ "]")? }

term = _{
    literal
  | call_expr
  | variable_expression
  | unary_expression
  | par_expression
}

expression = { term ~ (binary_operator ~ term)* }


// Statements

statement = {
    if_stmt
  | while_stmt
  | ret_stmt
  | declaration ~ ";"
  | assignment ~ ";"
  | expression ~ ";"
  | compound_stmt
}

condition = _{ "(" ~ expression ~ ")" }
if_stmt = { WHITESPACE* ~ "if" ~ condition ~ statement ~ ("else" ~ statement)? }
while_stmt = { WHITESPACE* ~ "while" ~ condition ~ statement }
ret_stmt = { WHITESPACE* ~ "return" ~ expression? ~ ";" }
compound_stmt = { "{" ~ statement* ~ "}" }


// Functions

function_def = { ("void" | ty) ~ identifier ~ "(" ~ parameters? ~ ")" ~ compound_stmt }
parameters = { declaration ~ ("," ~ declaration)* }

call_expr = { identifier ~ "(" ~ arguments? ~ ")" }
arguments = { expression ~ ("," ~ expression)* }


// Program

program = { SOI ~ function_def* ~ EOI }
